{
    "swagger": "2.0",
    "info": {
        "description": "Wecome to the WalletChat API Documentation\n\nPlease make note that some JSON data structures are shared for both input/output.\nRequired input parameters will have a red * next to them in the data type outline at\nthe bottom of the page, along with a comment.  This means when executing API functionality\nfrom this API page, some fields may need to be removed from the JSON struct before submitting.\nPlease email the developers with any issues.\nSome JSON data structures are output only, and will be marked as such as well.\n\nv0 of the API does not include encryption or authentication.  Please as you are given access\nto this page, do not abuse this system and impersonate others, or submit offensive material.\ndevelopers monitor this data daily.\n\nv1 will include encyrption for DMs, private keys will be stored locally on client PCs\nwith no way for us to recover any data which is encrypted.\n\nv1 will also include basic JWT Authentication, however some more work to make this fully secure\nwill be needed and included in v2.",
        "title": "WalletChat API",
        "contact": {
            "url": "https://walletchat.fun",
            "email": "walletchatextension@gmail.com"
        },
        "version": "1.0"
    },
    "host": "restwalletchat-app-sey3k.ondigitalocean.app",
    "paths": {
        "/community": {
            "post": {
                "description": "Community Chat Data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupChat"
                ],
                "summary": "CreateCommunityChatitem creates GroupChatitem just with community tag (likely could be consolidated)",
                "parameters": [
                    {
                        "description": "Community Message Chat Data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Groupchatitem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Groupchatitem"
                            }
                        }
                    }
                }
            }
        },
        "/community/{community}/{address}": {
            "get": {
                "description": "TODO: need a creation API for communities, which includes specificied welcome message text, Twitter handle, page title",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupChat"
                ],
                "summary": "Get Community Chat Landing Page Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controllers.LandingPageItems"
                            }
                        }
                    }
                }
            }
        },
        "/create_bookmark": {
            "post": {
                "description": "Bookmarks keep an NFT/Community group chat in the sidebar",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupChat"
                ],
                "summary": "Join an NFT or Community group chat",
                "parameters": [
                    {
                        "description": "Add Bookmark from Community Group Chat",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Bookmarkitem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Bookmarkitem"
                            }
                        }
                    }
                }
            }
        },
        "/create_chatitem": {
            "post": {
                "description": "For DMs, Chatitem data struct is used to store each message and associated info.\nREQUIRED: fromaddr, toaddr, message (see data struct section at bottom of page for more detailed info on each paramter)\nOther fields are generally filled in by the backed REST API and used as return parameters\nID is auto generated and should never be used as input.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DMs"
                ],
                "summary": "Create/Insert DM Chat Message (1-to-1 messaging)",
                "parameters": [
                    {
                        "description": "Direct Message Chat Data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Chatitem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Chatitem"
                            }
                        }
                    }
                }
            }
        },
        "/create_comments": {
            "post": {
                "description": "Comments are meant to be public, someday having an up/downvote method for auto-moderation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Comments are used within an NFT community chat",
                "parameters": [
                    {
                        "description": "create struct",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Comments"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Comments"
                            }
                        }
                    }
                }
            }
        },
        "/create_groupchatitem": {
            "post": {
                "description": "Currently used for all messages outside of DMs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupChat"
                ],
                "summary": "Create/Insert chat message for Community/NFT/Group Messaging",
                "parameters": [
                    {
                        "description": "Group Message Chat Data",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Groupchatitem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Groupchatitem"
                            }
                        }
                    }
                }
            }
        },
        "/create_settings": {
            "post": {
                "description": "Currently this only updates the public key, could be expanded as needed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common"
                ],
                "summary": "Settings hold a user address and the public key used for encryption.",
                "parameters": [
                    {
                        "description": "update struct",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Settings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Settings"
                            }
                        }
                    }
                }
            }
        },
        "/delete_bookmark": {
            "post": {
                "description": "Bookmarks keep an NFT/Community group chat in the sidebar",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupChat"
                ],
                "summary": "Leave an NFT or Community group chat",
                "parameters": [
                    {
                        "description": "Remove Bookmark from Community Group Chat",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Bookmarkitem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Bookmarkitem"
                            }
                        }
                    }
                }
            }
        },
        "/delete_comments/{fromaddr}/{nftaddr}/{nftid}": {
            "delete": {
                "description": "NFTs have a public comment section",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Delete Public Comments for given FROM wallet address, NFT Contract and ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "FROM Wallet Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT Contract Address",
                        "name": "nftaddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT ID",
                        "name": "nftid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/delete_settings/{address}": {
            "delete": {
                "description": "TODO: Need to protect this with JWT in addition to other API calls needed to use FROM addr from the JWT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unused/Legacy"
                ],
                "summary": "Delete Settings Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/deleteall_chatitems/{fromaddr}/{toaddr}": {
            "delete": {
                "description": "TODO: Need to protect this with JWT in addition to other API calls needed to use FROM addr from the JWT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unused/Legacy"
                ],
                "summary": "Delete All Chat Items (DMs) between FROM and TO given addresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TO: Address",
                        "name": "toaddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "FROM: Address",
                        "name": "fromaddr",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/get_bookmarks/{address}/": {
            "get": {
                "description": "This used for UI purposes, checking if a user/wallet has bookmarked a community.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupChat"
                ],
                "summary": "Check if a wallet address has bookmarked/joined given NFT contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Bookmarkitem"
                            }
                        }
                    }
                }
            }
        },
        "/get_bookmarks/{walletaddr}/{nftaddr}": {
            "get": {
                "description": "This used for UI purposes, checking if a user/wallet has bookmarked a community.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GroupChat"
                ],
                "summary": "Check if a wallet address has bookmarked/joined given NFT contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "walletaddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT Contract Address",
                        "name": "nftaddr",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "bool"
                        }
                    }
                }
            }
        },
        "/get_comments/{nftaddr}/{nftid}": {
            "get": {
                "description": "NFTs have a public comment section",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Get Public Comments Count for given NFT Contract and ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NFT Contract Address",
                        "name": "nftaddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT ID",
                        "name": "nftid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/get_groupchatitems/{address}": {
            "get": {
                "description": "Community Chat Data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "GetGroupChatItems gets group chat data for a given NFT address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Get Group Chat Data By NFT Address",
                        "name": "message",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Groupchatitem"
                            }
                        }
                    }
                }
            }
        },
        "/get_groupchatitems/{address}/{useraddress}": {
            "get": {
                "description": "Get all group chat items for a given wallet (useraddress) for a given NFT Contract Address (TODO: fix up var names)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Get group chat items, given a wallt FROM address and NFT Contract Address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NFT Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "FROM: wallet address",
                        "name": "useraddress",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Groupchatitem"
                            }
                        }
                    }
                }
            }
        },
        "/get_groupchatitems_unreadcnt/{address}/{useraddress}": {
            "get": {
                "description": "For group chat unread counts, currently the database stores a timestamp for each time a user enters a group chat.\nWe though in the design it would be impractical to keep a read/unread count copy per user per message, but if this\nmethod doesn't proof to be fine grained enough, we could add a boolean relational table of read messgages per user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Common"
                ],
                "summary": "Get Unread Groupchat Items (TODO: cleanup naming convention here)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Common Name Mapped to User/Community",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/get_inbox/{address}": {
            "get": {
                "description": "Get Each 1-on-1 Conversation, NFT and Community Chat For Display in Inbox",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inbox"
                ],
                "summary": "Get Inbox Summary With Last Message",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Chatiteminbox"
                            }
                        }
                    }
                }
            }
        },
        "/get_settings/{address}": {
            "get": {
                "description": "TODO: Need to protect this with JWT in addition to other API calls needed to use FROM addr from the JWT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unused/Legacy"
                ],
                "summary": "Get Settings Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Settings"
                            }
                        }
                    }
                }
            }
        },
        "/get_unread_cnt/{address}": {
            "get": {
                "description": "Get Each 1-on-1 Conversation, NFT and Community Chat For Display in Inbox",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inbox"
                ],
                "summary": "Get all unread messages TO a specific user, used for total count notification at top notification bar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/get_unread_cnt/{address}/{nftaddr}/{nftid}": {
            "get": {
                "description": "Get Unread count for specifc NFT context given a wallet address and specific NFT",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Get all unread messages for a specific NFT context",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT Contract Address",
                        "name": "nftaddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT ID",
                        "name": "nftid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/get_unread_cnt/{fromaddr}/{toaddr}": {
            "get": {
                "description": "Get Unread count for DMs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unused/Legacy"
                ],
                "summary": "Get all unread messages between two addresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TO: Wallet Address",
                        "name": "toaddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "FROM: Wallet Address",
                        "name": "from",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/get_unread_cnt_by_type/{address}/{type}": {
            "get": {
                "description": "Get Each 1-on-1 Conversation, NFT and Community Chat For Display in Inbox",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unused/Legacy"
                ],
                "summary": "Get all unread messages TO a specific user, used for total count notification at top notification bar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Message Type - nft|community|dm|all",
                        "name": "type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/get_unread_cnt_nft/{address}": {
            "get": {
                "description": "Get Unread count for all NFT contexts given a wallet address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unused/Legacy"
                ],
                "summary": "Get all unread messages for all NFT related chats for given user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/getall_chatitems/{address}": {
            "get": {
                "description": "Get all Chat Items for DMs for a given wallet address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unused/Legacy"
                ],
                "summary": "Get Chat Item For Given Wallet Address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "toaddr",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Chatitem"
                            }
                        }
                    }
                }
            }
        },
        "/getall_chatitems/{fromaddr}/{toaddr}": {
            "get": {
                "description": "Get chat data between the given two addresses, TO and FROM and interchangable here",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DMs"
                ],
                "summary": "Get Chat Data Between Two Addresses",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TO: Wallet Address",
                        "name": "toaddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "FROM: Wallet Address",
                        "name": "from",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Chatitem"
                            }
                        }
                    }
                }
            }
        },
        "/getnft_chatitems/{address}": {
            "get": {
                "description": "Get ALL NFT context items for a given wallet address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unused/Legacy"
                ],
                "summary": "Get NFT Related Chat Items For Given Wallet Address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "toaddr",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Chatitem"
                            }
                        }
                    }
                }
            }
        },
        "/getnft_chatitems/{address}/{nftaddr}/{nftid}": {
            "get": {
                "description": "Get all specified NFT contract and ID items for a given wallet address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unused/Legacy"
                ],
                "summary": "Get NFT Related Chat Items For Given NFT Contract and ID, relating to one wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT Contract Address",
                        "name": "nftaddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT ID",
                        "name": "nftid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Chatitem"
                            }
                        }
                    }
                }
            }
        },
        "/getnft_chatitems/{fromaddr}/{toaddr}/{nftaddr}/{nftid}": {
            "get": {
                "description": "Get ALL NFT context items for a specifc NFT context convo between two wallets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NFT"
                ],
                "summary": "Get NFT Related Chat Items For Given NFT Contract and ID, between two wallet addresses (TO and FROM are interchangable)",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NFT Contract Address",
                        "name": "nftaddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT ID",
                        "name": "nftid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "TO: Wallet Address",
                        "name": "toaddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "FROM: Wallet Address",
                        "name": "from",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Chatitem"
                            }
                        }
                    }
                }
            }
        },
        "/getnft_chatitems/{nftaddr}/{nftid}": {
            "get": {
                "description": "Get ALL NFT context items for a given wallet address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Unused/Legacy"
                ],
                "summary": "Get NFT Related Chat Items For Given NFT Contract and ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NFT Contract Address",
                        "name": "nftaddr",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "NFT ID",
                        "name": "nftid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Chatitem"
                            }
                        }
                    }
                }
            }
        },
        "/image": {
            "put": {
                "description": "Currently used for the WC HQ Logo, stores the base64 raw data of the profile image for a community",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common"
                ],
                "summary": "Store Image in DB for later user (update existing photo)",
                "parameters": [
                    {
                        "description": "Profile Thumbnail Pic",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Imageitem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Bookmarkitem"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Currently used for the WC HQ Logo, stores the base64 raw data of the profile image for a community",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common"
                ],
                "summary": "Store Image in DB for later user",
                "parameters": [
                    {
                        "description": "Profile Thumbnail Pic",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Imageitem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Bookmarkitem"
                            }
                        }
                    }
                }
            }
        },
        "/image/{name}": {
            "get": {
                "description": "Retreive image data for use with user/community/nft group dislayed icon",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common"
                ],
                "summary": "Get Thumbnail Image Data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Common Name Mapped to User/Community",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Imageitem"
                            }
                        }
                    }
                }
            }
        },
        "/is_owner/{contract}/{wallet}": {
            "get": {
                "description": "API user could check this directly via any third party service like NFTPort, Moralis as well",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common"
                ],
                "summary": "Check if given wallet address owns an NFT from given contract address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "NFT Contract Address",
                        "name": "contract",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controllers.LandingPageItems"
                            }
                        }
                    }
                }
            }
        },
        "/name": {
            "put": {
                "description": "Give a common name (Kevin.eth, BillyTheKid, etc) to an Address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common"
                ],
                "summary": "give a common name to a user address, or NFT collection (update exiting)",
                "parameters": [
                    {
                        "description": "Address and Name to map together",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Addrnameitem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Bookmarkitem"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Give a common name (Kevin.eth, BillyTheKid, etc) to an Address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common"
                ],
                "summary": "give a common name to a user address, or NFT collection",
                "parameters": [
                    {
                        "description": "Address and Name to map together",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Addrnameitem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Bookmarkitem"
                            }
                        }
                    }
                }
            }
        },
        "/name/{name}": {
            "get": {
                "description": "get the given a common name (Kevin.eth, BillyTheKid, etc) what has already been mapped to an Address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common"
                ],
                "summary": "get the common name which has been mapped to an address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Get Name for given address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Addrnameitem"
                            }
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "This is a one-time operation, maybe could be combined into the nonce-generating call.  Basically places a wallet address\ninto the database for further use.  Only the \"address\" field is needed for input here in the AuthUser struct.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register Wallet Address for the first time, one-time operation",
                "parameters": [
                    {
                        "description": "address input in json format",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.Authuser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/signin": {
            "post": {
                "description": "Every call the to API after this signin should present the JWT Bearer token for authenticated access.\nUpon request we can change the timeout to greater than 24 hours, or setup an addtional dedicated API for\nan agreed upon development and maintenance cost.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Sign In with signed nonce value, currently JWT token returned should be valid for 24 hours",
                "parameters": [
                    {
                        "description": "json input containing signed nonce",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SigninPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/unreadcount/{address}": {
            "get": {
                "description": "Get Unread count just given an address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Inbox"
                ],
                "summary": "Get all unread messages TO a specific user, used for total count notification at top notification bar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet Address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    }
                }
            }
        },
        "/update_chatitem/{fromaddr}/{toaddr}": {
            "put": {
                "description": "Currently this only update the message read/unread status.  It could update the entire JSON struct\nupon request, however we only needed this functionality currently and it saved re-encryption of the data.\nTODO: TO/FROM address in the URL is not needed/not used anymore.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "DMs"
                ],
                "summary": "Update Message Read Status of a given DM chat message",
                "parameters": [
                    {
                        "description": "chat item JSON struct to update msg read status",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Chatitem"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Chatitem"
                            }
                        }
                    }
                }
            }
        },
        "/update_settings": {
            "put": {
                "description": "Currently this only updates the public key, could be expanded as needed.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Common"
                ],
                "summary": "Settings hold a user address and the public key used for encryption.",
                "parameters": [
                    {
                        "description": "update struct",
                        "name": "message",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Settings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Settings"
                            }
                        }
                    }
                }
            }
        },
        "/users/{address}/nonce": {
            "get": {
                "description": "As part of the login process, we need a user to sign a nonce genrated from the API, to prove the user in fact\nthe owner of the wallet they are siging in from.  JWT currently set to 24 hour validity (could change this upon request)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "If the current wallet doesn't have a valid local JWT, need to request a new nonce to sign",
                "parameters": [
                    {
                        "type": "string",
                        "description": "wallet address to get nonce to sign",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": ""
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.Authuser": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "nonce": {
                    "type": "string"
                }
            }
        },
        "auth.SigninPayload": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "nonce": {
                    "type": "string"
                },
                "sig": {
                    "type": "string"
                }
            }
        },
        "controllers.Attachments": {
            "type": "object",
            "properties": {
                "media_keys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "controllers.LandingPageItems": {
            "type": "object",
            "properties": {
                "has_messaged": {
                    "description": "has user messaged in this group chat before? if not show \"Say hi\" button",
                    "type": "boolean"
                },
                "is_verified": {
                    "description": "is this group verified? WalletChat's group is verified by default",
                    "type": "boolean"
                },
                "joined": {
                    "description": "number of members of the group",
                    "type": "boolean"
                },
                "logo": {
                    "description": "logo url, stored in backend",
                    "type": "string"
                },
                "members": {
                    "type": "integer"
                },
                "messages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Groupchatitem"
                    }
                },
                "name": {
                    "type": "string"
                },
                "social": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.SocialMsg"
                    }
                },
                "tweets": {
                    "description": "follow format of GET /get_twitter/{nftAddr}",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.TweetType"
                    }
                }
            }
        },
        "controllers.SocialMsg": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controllers.TweetType": {
            "type": "object",
            "properties": {
                "attachments": {
                    "type": "object",
                    "properties": {
                        "media_keys": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "author_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "media": {
                    "$ref": "#/definitions/controllers.Attachments"
                },
                "text": {
                    "type": "string"
                },
                "user": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "profile_image_url": {
                            "type": "string"
                        },
                        "username": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "entity.Addrnameitem": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entity.Bookmarkitem": {
            "type": "object",
            "properties": {
                "chain": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "nftaddr": {
                    "type": "string"
                },
                "walletaddr": {
                    "type": "string"
                }
            }
        },
        "entity.Chatitem": {
            "type": "object",
            "required": [
                "fromaddr",
                "message",
                "toaddr"
            ],
            "properties": {
                "fromaddr": {
                    "description": "*** REQUIRED INPUT ***",
                    "type": "string"
                },
                "id": {
                    "description": "AUTO-GENERATED (PRIMARY KEY)",
                    "type": "integer"
                },
                "message": {
                    "description": "*** REQUIRED INPUT ***",
                    "type": "string"
                },
                "nftaddr": {
                    "description": "ONLY USED FOR NFT DM CONTEXT",
                    "type": "string"
                },
                "nftid": {
                    "description": "ONLY USED FOR NFT DM CONTEXT",
                    "type": "string"
                },
                "read": {
                    "description": "DEFAULT FALSE",
                    "type": "boolean"
                },
                "sender_name": {
                    "description": "AUTO-SET BY BACKED FOR RETURN VALUE",
                    "type": "string"
                },
                "timestamp": {
                    "description": "AUTO-SET BY REST API",
                    "type": "string"
                },
                "timestamp_dtm": {
                    "description": "USED FOR SORTING WHEN TIME FORMAT NEEDED",
                    "type": "string"
                },
                "toaddr": {
                    "description": "*** REQUIRED INPUT ***",
                    "type": "string"
                }
            }
        },
        "entity.Chatiteminbox": {
            "description": "Used as Return Data Struct Only",
            "type": "object",
            "properties": {
                "chain": {
                    "type": "string"
                },
                "context_type": {
                    "type": "string"
                },
                "fromaddr": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "logo": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nftaddr": {
                    "type": "string"
                },
                "nftid": {
                    "type": "string"
                },
                "read": {
                    "type": "boolean"
                },
                "sender_name": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "timestamp_dtm": {
                    "type": "string"
                },
                "toaddr": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "unread": {
                    "type": "integer"
                }
            }
        },
        "entity.Comments": {
            "type": "object",
            "properties": {
                "fromaddr": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nftaddr": {
                    "type": "string"
                },
                "nftid": {
                    "type": "integer"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "entity.Groupchatitem": {
            "type": "object",
            "properties": {
                "context_type": {
                    "type": "string"
                },
                "fromaddr": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "nftaddr": {
                    "type": "string"
                },
                "sender_name": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "timestamp_dtm": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "entity.Imageitem": {
            "type": "object",
            "properties": {
                "base64data": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "entity.Settings": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "publickey": {
                    "description": "need this for encryption, don't want to get it over and over",
                    "type": "string"
                },
                "walletaddr": {
                    "type": "string"
                }
            }
        }
    }
}